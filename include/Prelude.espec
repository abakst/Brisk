module spec Prelude where

GHC.Base.$ <= {
  \a b x y -> (x y)
}

GHC.Prim.void# <= {
  void
}

Control.Monad.forM <= {
  \t m a b xs f -> $R(a, x, f x >>= \y -> return (y : a), [], xs)
}

Control.Monad.mapM <= {
  \t m a b f xs -> $R(a, x, f x >>= \y -> return (y : a), [], xs)
}

Control.Distributed.BriskStatic.Internal.castEffect <= {
  \a b x y -> y
}

Control.Distributed.Process.Internal.Primitives.send <= {
  \t x y -> $send(t,x,y)
}

Control.Distributed.Process.Internal.Primitives.getSelfPid <= {
  $self
}

Control.Distributed.Process.Internal.Primitives.spawnLocal <= {
  \p -> $spawn(p)
}

Control.Distributed.Process.Internal.Primitives.expect <= {
  \t -> $recv(t)
}

Control.Distributed.Process.SymmetricProcess.spawnSymmetric <= {
  \nodes p -> $symSpawn(nodes, p)
}